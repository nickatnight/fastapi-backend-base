---

name: build, test and deploy

on:
  push:
    tags:
      - '*'
    branches:
      - master
      - develop

env:
  DOCTL_VERSION: 1.84.1

jobs:
  flake8:
    runs-on: ubuntu-latest
    name: Check python linting
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Start linter
        run: |
          docker run --rm -w="/code/backend" -v $(pwd):/code alpine/flake8:5.0.4 .

  black:
    runs-on: ubuntu-latest
    name: Black code formatting
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: run black
        working-directory: ./backend
        run: |
          pip install black==21.5b1
          black --check .

  isort:
    runs-on: ubuntu-20.04
    name: isort imports
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'
      - name: run black
        working-directory: ./backend
        run: |
          pip install isort==5.10.1
          isort src

  build_backend:
    if: ${{ secrets.ENABLE_BUILD }} == 'true'
    runs-on: ubuntu-latest
    needs: [flake8,black, isort]
    name: Build backend
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
      - name: Build backend
        run: |
          docker build --build-arg env=staging -t ${{ secrets.REGISTRY }}/backend:${{ github.sha }} ./backend
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      - name: Push image to DigitalOcean Container Registry
        run: docker push ${{ secrets.REGISTRY }}/backend:${{ github.sha }}

  build_proxy:
    if: ${{ secrets.ENABLE_BUILD }} == 'true'
    runs-on: ubuntu-latest
    needs: [flake8,black]
    name: Build Nginx proxy
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}
      - name: Build proxy
        run: |
          docker build --build-arg env=staging -t ${{ secrets.REGISTRY }}/proxy:${{ github.sha }} ./proxy
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      - name: Push image to DigitalOcean Container Registry
        run: docker push ${{ secrets.REGISTRY }}/proxy:${{ github.sha }}

  unit_tests:
    runs-on: ubuntu-latest
    needs: [build_backend, build_proxy]
    name: Run unit tests
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run unit tests
        run: |
          docker-compose -f ops/docker-compose.test.yml up --exit-code-from backend
      - name: Codecov
        uses: codecov/codecov-action@v1
        with:
          file: /data/coverage.xml
          flags: unittests
      - name: Clean-up
        if: always()
        run: |
          docker-compose -f ops/docker-compose.test.yml down -v

  create-release:
    needs: [flake8, black, isort]
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # need this for all history for all branches and tags
      - name: Create Release
        id: create_release
        uses: nickatnight/releases-action@v3
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      ReleaseTag: ${{ steps.create_release.outputs.release_tag }}

  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    needs: [unit_tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy staging
        uses: ironhalik/docker-over-ssh-action@v6
        if: github.ref == 'refs/heads/develop'
        env:
          COMPOSE_FILE: ops/docker-compose.staging.yml
          STACK_NAME: tagyoureitbot-staging
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          REGISTRY: ${{ secrets.REGISTRY }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        with:
          user: ubuntu
          host: ${{ secrets.STAGING_HOST_IP }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            wget https://github.com/digitalocean/doctl/releases/download/v${{ env.DOCTL_VERSION }}/doctl-${{ env.DOCTL_VERSION }}-linux-amd64.tar.gz
            tar xf ./doctl-${{ env.DOCTL_VERSION }}-linux-amd64.tar.gz
            mv ./doctl /usr/local/bin
            doctl registry login
            docker stack deploy --compose-file ${COMPOSE_FILE} --with-registry-auth --prune ${STACK_NAME}

      - name: Deploy prod
        uses: ironhalik/docker-over-ssh-action@v6
        if: github.ref == 'refs/heads/master'
        env:
          COMPOSE_FILE: ops/docker-compose.prod.yml
          STACK_NAME: tagyoureit-prod
          DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
          REGISTRY: ${{ secrets.REGISTRY }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          PASSWORD: ${{ secrets.PASSWORD }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        with:
          user: ubuntu
          host: ${{ secrets.PROD_HOST_IP }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            wget https://github.com/digitalocean/doctl/releases/download/v${{ env.DOCTL_VERSION }}/doctl-${{ env.DOCTL_VERSION }}-linux-amd64.tar.gz
            tar xf ./doctl-${{ env.DOCTL_VERSION }}-linux-amd64.tar.gz
            mv ./doctl /usr/local/bin
            doctl registry login
            docker stack deploy --compose-file ${COMPOSE_FILE} --with-registry-auth --prune ${STACK_NAME}
